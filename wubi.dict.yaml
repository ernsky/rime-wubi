# Rime schema settings
# encoding: utf-8
# 
# 有用的参考
# [beavailable](https://github.com/beavailable/better-wubi)
# [在线配色方案](https://fxliang.github.io/RimeSeeMe/)
# [雾淞拼音](https://github.com/iDvel/rime-ice)
# [四叶草拼音方案](https://github.com/fkxxyz/rime-cloverpinyin)
# [极点五笔方案](https://github.com/KyleBing/rime-wubi86-jidian)
# [空山明月方案](http://98wb.ysepan.com/)
# [新世纪词库集成](https://06wb.github.io/Tables/index.html)——里面收集了很多资源
# [白霜拼音](https://github.com/gaboolic/rime-frost)
# [小鹤双拼](https://github.com/boomker/rime-fast-xhup)——这个里面有手动加词语法
# [输入方案排名](https://github.com/ayaka14732/awesome-rime)


# ------- 单字码表采用《通用规范汉字表》8105 字字表 -------
# 单字：86五笔编码，加入一、二、三级简码。个别单字进行了调序，额外增加了雾凇常用生僻字。
# 使用的字频：微软字频
# 词组：采用两级词库，一级常用词，二级一码词，常用词量18000，以微软词频排序构成。词组优先，其次单字。
# 自我修改之前，已经上传到空间。
# 用法
# 1. 可快速输入Markdown主要代码。如标题、代码、引用……，若要调整，在symbols.yaml文件里，当然，一些快捷的符号，都在这里，可翻看翻看，很好用。这项在wubi86.user里面修改。
# 2. 可快速输入财务用数字，按住“Shift+任一字母”，然后输入数字，即可转换为大写财务数字，如壹、贰…………
# 3. 使用“;”、“'”，即封号、引号，可快速选择第二、三项候选项。
# 4. 使用“Tab”可快速向下翻页。
# 5. 五笔和拼音，启动时，全部改为了英文状态。
# 6. 输入riqi、sjian、week可快速输入当前日期和时间。
# 7. 可实现五笔连打，以及同英语混输。


schema:
  schema_id: wubi
  name: "五笔"
  version: "2024-12-19"
#  icon: "wubi86.ico"    # string 方案图标，格式： .ico
#  ascii_icon:                         # string
  author:
    - Alamo
  description: |
    基于【 beavailable 】编码修改
    外挂非常用字及词组   
    以86五笔编码为基础，个别码位进行了调整
    敲 / 鍵進入拼音反查
    大写字母+数字，输入大写数字
  dependencies:
    - rime_ice
    - melt_eng  # 英文输入，作为次翻译器挂载到拼音方案

switches:
  - name: ascii_mode
    states: [ 中, Ａ ]
    reset: 0
  - name: ascii_punct # 中英标点
    states: [ 。, .  ]
    reset: 0
  - name: traditionalize
    states: [ 简, 繁 ]
    reset: 0
  - name: emoji
    states: [ 💀, 😄 ]
    reset: 1
  - name: full_shape  #  全角符号／半角符号开关。注意，开启全角时英文字母亦为全角。`0`为半角，`1`为全角
    states: [ 半, 全 ]
    reset: 0

engine:
  processors:
    - ascii_composer                             #  处理西文模式及中西文切
    - recognizer                                 #  与`matcher`搭配，处理符合特定规则的输入码，如网址、反查等`tags`
    - key_binder                                 #  在特定条件下将按键绑定到其他按键，如重定义逗号、句号为候选翻页、开关快捷键等
    - speller                                    #  拼写处理器，接受字符按键，编辑输入
    - punctuator                                 #  句读处理器，将单个字符按键直接映射为标点符号或文字
    - selector                                   #  选字处理器，处理数字选字键〔可以换成别的哦〕、上、下候选定位、换页
    - navigator                                  #  处理输入栏内的光标移动
    - express_editor                             #  编辑器，处理空格、回车上屏、回退键
  segmentors:
    - ascii_segmentor                            #  标识西文段落〔譬如在西文模式下〕字母直接上屛
    - matcher                                    #  配合`recognizer`标识符合特定规则的段落，如网址、反查等，加上特定`tag`
    - abc_segmentor                              #  标识常规的文字段落，加上`abc`这个`tag`
    - punct_segmentor                            #  标识句读段落〔键入标点符号用〕加上`punct`这个`tag`
    - fallback_segmentor                         #  标识其他未标识段落
  translators:
    - punct_translator                           #  配合`punct_segmentor`转换标点符号
    - reverse_lookup_translator
    - table_translator                           #  码表翻译器，用于仓颉、五笔等基于码表的输入方案
    - lua_translator@*date_translator     # 日期、时间、星期
    - lua_translator@*number_translator   # 大写字母
    - history_translator@repeat_last_input       # 重复上一次输入，对应下面的 repeat_last_input
    - table_translator@melt_eng                  # 英文输入
    - lua_translator@*long_phrase_first          # 长词优先
  filters:
    - simplifier@tradition                       # 简繁切换
    - simplifier@emoji
    - lua_filter@*reduce_english_filter          # 英文降频
    - lua_filter@*autocap_filter                 # 英文自动大写
    - lua_filter@*en_spacer                      # 启用时中文状态下输入英文单词后面自动追加空格
    - lua_filter@*long_word_filter               # 长词优先
#    - lua_filter@*single_char_first_filter  # 单字优先
#    - lua_filter@*single_char_only        # 纯单字

speller:
  auto_select: true             #  自動上屛
  delimiter: "`"               #上屏时的音节间分音符
  alphabet: "qwertasdfgzxcvbyuiophjklnm/"
#  max_code_length: 4            #  四码上屏
#  auto_clear: max_length     #自动清码参数：manual空码按下一键确认清屏、auto空码自动清、max_length达最长码时后码顶上清屏
  auto_clear: max_length        #  自動清屛（四碼以內空碼不自動清屛；四碼空碼時，第五碼清空前四碼）
  algebra:  # 万能z键拼写处理，z符号匹配任意字符
    - derive/^(...).$/$1z/
    - derive/^(..).(.*)$/$1z$2/
    - derive/^(.).(.*)$/$1z$2/
    # - derive/^.(.*)$/z$1/  # 开启本行将与z键重复上屏冲突

translator:
  dictionary: wubi              #  翻译器将调取此字典文件
  db_class: tabledb             #  设置用户词典类型，可设`tabledb`〔文本〕或`userdb`〔二进制〕
  initial_quality: 2            #  设置此翻译器出字优先级
  enable_charset_filter: false  #  是否开启字符集过滤〔仅`table_translator`有效。启用`cjk_minifier`后可适用于`script_translator`〕
  enable_sentence: true         #  是否开启自动造句
  enable_encoder: false         #  是否开启自动造词〔仅`table_translator`有效〕
  encode_commit_history: false  #  是否对已上屛词自动成词〔仅`table_translator`有效〕
  max_phrase_length: 4          #  最大自动成词词长〔仅`table_translator`有效〕
  enable_completion: true       #  提前显示尚未输入完整码的字〔仅`table_translator`有效〕
#  sentence_over_completion:    #  在无全码对应字而仅有逐键提示时也开启智能组句〔仅`table_translator`有效〕
#  strict_spelling:             #  配合`speller`中的`fuzz`规则，仅以畧拼码组词〔仅`table_translator`有效〕
#  preedit_format:              #  上屛码自定义
#  comment_format:              #  提示码自定义
#  spelling_hints:              #  设置多少字以内候选标注完整带调拼音〔仅`script_translator`有效〕
#  tag:                         #  设置此翻译器针对的`tag`。可不塡，不塡则仅针对`abc`
#  prefix:                      #  设置此翻译器的前缀标识，可不塡，不塡则无前缀
#  suffix:                      #  设置此翻译器的尾缀标识，可不塡，不塡则无尾缀
#  tips:                        #  设置此翻译器的输入前提示符，可不塡，不塡则无提示符
#  closing_tips:                #  设置此翻译器的结束输入提示符，可不塡，不塡则无提示符
#  contextual_suggestions:      #  是否使用语言模型优化输出结果〔需配合`grammar`使用〕
#  max_homophones:              #  最大同音簇长度〔需配合`grammar`使用〕
#  max_homographs:              #  最大同形簇长度〔需配合`grammar`使用〕
  enable_user_dict: false        #  是否开启用户词典〔用户词典记录动态字词频、用户词〕使用段时间，词库优化好后，把这项关掉。
#  prioritize_quality: true          # 启用优先质量选项
  disable_user_dict_for_patterns:  #  禁止某些編碼錄入用戶詞典
    - "^z.*$"
    - "^[a-y]{1,3}$"              # 四码调频，一 二 三 简字不调频

# Lua 配置: 日期、时间、星期、ISO 8601、时间戳的触发关键字
date_translator:
  date: rq       # 日期： 2022-11-29
  time: sj       # 时间： 18:13
  week: xq       # 星期： 星期二
  datetime: dt   # ISO 8601： 2022-11-29T18:13:11+08:00
  timestamp: ts  # 时间戳： 1669716794

# 次翻译器，英文
melt_eng:
  dictionary: melt_eng     # 挂载词库 melt_eng.dict.yaml
  enable_sentence: false   # 禁止造句
  enable_user_dict: false  # 禁用用户词典
  initial_quality: 1.0     # 初始权重
  comment_format:          # 自定义提示码
    - xform/.*//           # 清空提示码

# Lua 配置: 降低部分英语单词在候选项的位置。
# 详细介绍 https://dvel.me/posts/make-rime-en-better/#短单词置顶的问题
# 正常情况： 输入 rug 得到 「1.rug 2.如果 …… 」
# 降低之后： 输入 rug 得到 「1.如果 2.rug …… 」
# 几种模式：
# all     降低所有 3~4 位长度、前 2~3 位是完整拼音、最后一位是声母的单词
# none    不降低任何单词，相当于没有启用这个 Lua
# custom  自定义，只降低 custom 里的
# （匹配的是编码，不是单词）
reduce_english_filter:
  mode: all  # all | none | custom
  idx: 2        # 降低到第 idx 个位置
  # 自定义的单词列表，示例列表没有降低部分常用单词，如 and cat mail Mac but bad shit ……
  words: [aid, ann,
  bail, bait, bam, band, bans, bat, bay, bend, bent, benz, bib, bid, bien, biz, boc, bop, bos, bud, buf,
  cab, cad, cain, cam, cans, cap, cas, cef, chad, chan, chap, chef, cher, chew, chic, chin, chip, chit, coup, cum, cunt, cur,
  dab, dag, dal, dam, dent, dew, dial, diet, dim, din, dip, dis, dit, doug, dub, dug, dunn,
  fab, fax, fob, fog, foul, fur,
  gag, gail, gain, gal, gam, gaol, ged, gel, ger, guam, gus, gut,
  hail, ham, hank, hans, hat, hay, heil, heir, hem, hep, hud, hum, hung, hunk, hut,
  jim, jug,
  kat,
  lab, lad, lag, laid, lam, laos, lap, lat, lax, lay, led, leg, lex, liam, lib, lid, lied, lien, lies, linn, lip, lit, liz, lob, lug, lund, lung, lux,
  mag, maid, mann, mar, mat, med, mel, mend, mens, ment, mil, mins, mint, mob, moc, mod, mop, mos, mot, mud, mug, mum, nail,
  nap, nat, nay, neil, nib, nip, noun, nous, nun, nut,
  pac, paid, pail, pain, pair, pak, pal, pam, pans, pant, pap, par, pat, paw, pax, pens, pic, pier, pies, pins, pint, pit, pix, pod, pop, pos, pot, pour, pow, pub,
  rand, rant, rent, rep, res, ret, rex, rib, rid, rig, rim, rub, rug, rum, runs,
  sac, sail, sal, sam, sans, sap, saw, sax, sew, sham, shaw, shin, sig, sin, sip, sis, suit, sung, suns, sup, sur, sus,
  tad, tail, taj, tar, tax, tec, ted, tel, ter, tex, tic, tied, tier, ties, tim, tin, tit, tour, tout, tum,
  wag, wand, wap, wax, weir, won,
  yan, yen]

# 简入繁出 通过 OpenCC 支持 github地址：https://github.com/BYVoid/OpenCC
# 已集成在输入法程序中，在输入法程序目录的 opencc 目录下
# 输入法程序中使用 OpenCC 简转繁的过程是这样：
# 1. 先从简转繁体
# 2. 如果配置了台湾繁体，就会将上一步生成的繁体进一步处理
# 3. 根据这个文件：https://github.com/BYVoid/OpenCC/blob/master/data/dictionary/TWVariants.txt 把台湾与正常繁体不同的地方转成台湾版本的字，比如 “床”

# 简体转繁体
tradition:
  #  opencc_config: s2t.json  # 简 -> 繁
  opencc_config: s2hk.json  # 繁 -> 香港
  #  opencc_config: t2s.json   # 繁 -> 简
  #  opencc_config: t2tw.json  # 繁 -> 台湾
  #  opencc_config: t2hk.json  # 繁 -> 香港
  #  opencc_config: s2tw.json  # 簡 -> 臺灣標準
  #  opencc_config: s2twp.json  # 簡 -> 臺灣片語
  option_name: traditionalize

reverse_lookup:
  dictionary: rime_ice  # 反查使用的拼音词库
  prefix: "/"              # 反查前缀，以它为起点
  suffix: "'"              # 反查后缀，以它为结点
  tips: [拼音]              # 反查时的提示信息
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/

punctuator:
  import_preset: default
#  import_preset: symbols
# 开始快捷输入符号功能，前面留两个空格
# 对应需要将下面 recognizer -> patterns 下面的 punct 字段的注释去掉

key_binder:
  import_preset: default

recognizer:
  import_preset: default
  patterns:
#    punct: "^/([0-9]+[a-z]*|[a-z]+)$" # 注意前方需要有4个空格，跟下面对齐
    reverse_lookup: "^/[a-z]*'?$" # 反查词条的正则

# 重复上一次输入
repeat_last_input:
  input: z
  size: 1
  initial_quality: 1.5
